plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
t <- seq(0, 1, length.out = 1000)
u <- rgamma(length(w), 1/10)
u <- u / sum(u)
u1 <- u
u1[1] <- u1[1]+u1[2]
u1[2] <- 0
u2 <- u
u2[2] <- u2[1]+u2[2]
u2[1] <- 0
plot(t, sapply(1:length(t), function(i){kfuna(t[i]*u1 + (1-t[i])*u2, phi, w)}))
w <- 1/rgamma(10, 3, 3)
w <- sort(w)
U <- svd(matrix(rnorm(10*3), 10))[["u"]]
dim(U)
crossprod(U)
v <- rnorm(3)
v <- v / sqrt(sum(v^2))
sum(v^2)
B <- diag(U%*%v)%*%U%*%t(U)%*%diag(w)%*%U%*%t(U)%*%diag(U%*%v)
diag(U%*%v)
U%*%v
B <- diag(c(U%*%v))%*%U%*%t(U)%*%diag(w)%*%U%*%t(U)%*%diag(c(U%*%v))
B
svd(B)
svd(B)[["d"]]
A <- diag((w^(1/2))*(c(U%*%v)))
eigen(A - B)
eigen(A - B)$values
A <- diag(((w^(1/2))*(c(U%*%v)))^2)
eigen(A - B)$values
M <- A - B
for(s in 1:10000){a <- rnorm(10); a <- abs(a)/sqrt(sum(a^2)); res[s] <- t(a)%*%M%*%a}
res <- rep(NA, 10000)
for(s in 1:10000){a <- rnorm(10); a <- abs(a)/sqrt(sum(a^2)); res[s] <- t(a)%*%M%*%a}
hist(res)
any(res < 0)
res1 <- matrix(NA, 10000, 10)
for(s in 1:10000){a <- rnorm(10); a <- abs(a)/sqrt(sum(a^2)); res[s] <- t(a)%*%M%*%a; res1[s,] <- M%*%a}
hist(res1[res<0,])
eigen(M)
setwd("~/Work/Projects/multirank/cmcca")
devtools::install(".")
setwd("~/Work/Projects/multirank/cmcca")
#
set.seed(1)
#
library(magrittr)
library(tidyverse)
#
N <- c(50, 100, 250, 500, 1000)
n_sim <- 200
p1 <- 2
p2 <- 2
d <- min(p1, p2)
#
COP_MSE <- matrix(NA, length(N), n_sim)
CCA_MSE <- matrix(NA, length(N), n_sim)
CMCCA_MSE <- matrix(NA, length(N), n_sim)
PLUG_MSE <- matrix(NA, length(N), n_sim)
#
Sig <- matrix(c(1, 0.25, 0.25, 1), nrow = 2)
#
linear_trans <- function(x, U){
U%*%x
}
i <- 1
n <- N[i]
#
l1 <- rbeta(1, 2, 1)
l2 <- runif(1, 0, l1)
Lambda <- c(l1, l2)
#
S <- rnorm(p1*d) %>% matrix(nrow = p1)
Q1 <- svd(S)[["u"]]%*%t(svd(S)[["v"]])
S <- rnorm(p2*d) %>% matrix(nrow = p2)
Q2 <- svd(S)[["u"]]%*%t(svd(S)[["v"]])
A <- Q1%*%diag(Lambda)%*%t(Q2)
#
Z <- sapply(1:n, function(i){
rnorm(d, sd = sqrt(Lambda))
}) %>% t()
#
Sigma1 <- diag(rep(1, p1)) - Q1%*%diag(Lambda)%*%t(Q1)
Sigma2 <- diag(rep(1, p2)) - Q2%*%diag(Lambda)%*%t(Q2)
X1 <- (Z%*%t(Q1)) + matrix(rnorm(n*p1), nrow=n)%*%chol(Sigma1)
X2 <- (Z%*%t(Q2)) + matrix(rnorm(n*p2), nrow=n)%*%chol(Sigma2)
#
Y1 <- apply(X1, 1, function(x){
linear_trans(x, Sig)
}) %>%
t()
#
Y2 <- apply(X2, 1, function(x){
linear_trans(x, Sig)
}) %>%
t()
#
cop_res <- sbgcop::sbgcop.mcmc(cbind(Y1, Y2), plugin.marginal = rep(T, p1+p2), nsamp = 500)
cop_samps <- cop_res$C.psamp %>%
apply(3, function(C){
C %>%
cmcca::compute_relation_matrix(c(p1, p2)) %>%
cmcca::extract_association_matrices(c(p1, p2)) %>%
magrittr::extract2('(1, 2)') %>%
c()
})
COP_MSE[i, sim] <- sum((rowMeans(cop_samps) - c(A))^2)
#
A_CCA <- cbind(Y1, Y2) %>%
apply(2, function(y){
y - mean(y)
}) %>%
magrittr::divide_by(sqrt(n)) %>%
t() %>%
magrittr::multiply_by_matrix(., t(.)) %>%
cmcca::compute_relation_matrix(c(p1, p2)) %>%
cmcca::extract_association_matrices(c(p1, p2)) %>%
magrittr::extract2('(1, 2)') %>%
c()
CCA_MSE[i, sim] <- sum((A_CCA - c(A))^2)
#
X1 <- rnorm(n*p1) %>% matrix(nrow=n)
X2 <- rnorm(n*p2) %>% matrix(nrow=n)
assign1 <- transport::transport(transport::pp(X1),
transport::pp(Y1),
p = 2)
assign2 <- transport::transport(transport::pp(X2),
transport::pp(Y2),
p = 2)
X1 <- X1[order(assign1[, 2]), ]
X2 <- X2[order(assign2[, 2]), ]
A_CCA <- cbind(X1, X2) %>%
apply(2, function(y){
y - mean(y)
}) %>%
magrittr::divide_by(sqrt(n)) %>%
t() %>%
magrittr::multiply_by_matrix(., t(.)) %>%
cmcca::compute_relation_matrix(c(p1, p2)) %>%
cmcca::extract_association_matrices(c(p1, p2)) %>%
magrittr::extract2('(1, 2)') %>%
c()
PLUG_MSE[i, sim] <- sum((A_CCA - c(A))^2)
#
cmcca_res <- cmcca::cmcca_mcmc(Y1, Y2, iter = 500)
dim(cmcca_res$Lambda)
dim(cmcca_res$Q1)
A_CCA <- sapply(1:ncol(cmcca_res$Lambda), function(m){
c(cmcca_res$Q1[,,m]%*%cmcca_res$Lambda[, m]%*%t(cmcca_res$Q2[,,m]))
})
A_CCA <- sapply(1:ncol(cmcca_res$Lambda), function(m){
c(cmcca_res$Q1[,,m]%*%diag(cmcca_res$Lambda[, m])%*%t(cmcca_res$Q2[,,m]))
})
A_CCA
A_CCA |> dim()
#
set.seed(1)
#
library(magrittr)
library(tidyverse)
#
N <- c(50, 100, 250, 500, 1000)
n_sim <- 5
p1 <- 2
p2 <- 2
d <- min(p1, p2)
#
COP_MSE <- matrix(NA, length(N), n_sim)
CCA_MSE <- matrix(NA, length(N), n_sim)
CMCCA_MSE <- matrix(NA, length(N), n_sim)
PLUG_MSE <- matrix(NA, length(N), n_sim)
#
Sig <- matrix(c(1, 0.25, 0.25, 1), nrow = 2)
#
linear_trans <- function(x, U){
U%*%x
}
#
for(i in 1:length(N)){
n <- N[i]
for(sim in 1:n_sim){
rm(.Random.seed, envir=globalenv())
#
l1 <- rbeta(1, 2, 1)
l2 <- runif(1, 0, l1)
Lambda <- c(l1, l2)
#
S <- rnorm(p1*d) %>% matrix(nrow = p1)
Q1 <- svd(S)[["u"]]%*%t(svd(S)[["v"]])
S <- rnorm(p2*d) %>% matrix(nrow = p2)
Q2 <- svd(S)[["u"]]%*%t(svd(S)[["v"]])
A <- Q1%*%diag(Lambda)%*%t(Q2)
#
Z <- sapply(1:n, function(i){
rnorm(d, sd = sqrt(Lambda))
}) %>% t()
#
Sigma1 <- diag(rep(1, p1)) - Q1%*%diag(Lambda)%*%t(Q1)
Sigma2 <- diag(rep(1, p2)) - Q2%*%diag(Lambda)%*%t(Q2)
X1 <- (Z%*%t(Q1)) + matrix(rnorm(n*p1), nrow=n)%*%chol(Sigma1)
X2 <- (Z%*%t(Q2)) + matrix(rnorm(n*p2), nrow=n)%*%chol(Sigma2)
#
Y1 <- apply(X1, 1, function(x){
linear_trans(x, Sig)
}) %>%
t()
#
Y2 <- apply(X2, 1, function(x){
linear_trans(x, Sig)
}) %>%
t()
#
cop_res <- sbgcop::sbgcop.mcmc(cbind(Y1, Y2), plugin.marginal = rep(T, p1+p2), nsamp = 500)
cop_samps <- cop_res$C.psamp %>%
apply(3, function(C){
C %>%
cmcca::compute_relation_matrix(c(p1, p2)) %>%
cmcca::extract_association_matrices(c(p1, p2)) %>%
magrittr::extract2('(1, 2)') %>%
c()
})
COP_MSE[i, sim] <- sum((rowMeans(cop_samps) - c(A))^2)
#
A_CCA <- cbind(Y1, Y2) %>%
apply(2, function(y){
y - mean(y)
}) %>%
magrittr::divide_by(sqrt(n)) %>%
t() %>%
magrittr::multiply_by_matrix(., t(.)) %>%
cmcca::compute_relation_matrix(c(p1, p2)) %>%
cmcca::extract_association_matrices(c(p1, p2)) %>%
magrittr::extract2('(1, 2)') %>%
c()
CCA_MSE[i, sim] <- sum((A_CCA - c(A))^2)
#
X1 <- rnorm(n*p1) %>% matrix(nrow=n)
X2 <- rnorm(n*p2) %>% matrix(nrow=n)
assign1 <- transport::transport(transport::pp(X1),
transport::pp(Y1),
p = 2)
assign2 <- transport::transport(transport::pp(X2),
transport::pp(Y2),
p = 2)
X1 <- X1[order(assign1[, 2]), ]
X2 <- X2[order(assign2[, 2]), ]
A_CCA <- cbind(X1, X2) %>%
apply(2, function(y){
y - mean(y)
}) %>%
magrittr::divide_by(sqrt(n)) %>%
t() %>%
magrittr::multiply_by_matrix(., t(.)) %>%
cmcca::compute_relation_matrix(c(p1, p2)) %>%
cmcca::extract_association_matrices(c(p1, p2)) %>%
magrittr::extract2('(1, 2)') %>%
c()
PLUG_MSE[i, sim] <- sum((A_CCA - c(A))^2)
#
cmcca_res <- cmcca::cmcca_mcmc(Y1, Y2, iter = 500)
A_CCA <- sapply(1:ncol(cmcca_res$Lambda), function(m){
c(cmcca_res$Q1[,,m]%*%diag(cmcca_res$Lambda[, m])%*%t(cmcca_res$Q2[,,m]))
}) %>%
rowMeans()
CMCCA_MSE[i, sim] <- sum((A_CCA - c(A))^2)
}
}
i
devtools::install(".")
#
cmcca_res <- cmcca::cmcca_mcmc(Y1, Y2, iter = 500)
